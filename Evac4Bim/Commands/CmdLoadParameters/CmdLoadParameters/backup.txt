using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.Attributes;
using System.Reflection;
using System.IO;
using Autodesk.Revit.ApplicationServices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



/// <summary>
/// Add extra BuiltInCategories 
/// Add extra Param types
/// </summary>



namespace Evac4Bim
{


    [TransactionAttribute(TransactionMode.Manual)]

    public class CmdLoadParameters : IExternalCommand
    {
        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {

            // Retrieve UIDocument object 
            UIDocument uidoc = commandData.Application.ActiveUIDocument;
            var uiapp = commandData.Application;
            var doc = uidoc.Document;
            var app = commandData.Application.Application;
            // Get the BingdingMap of current document.
            BindingMap bindingMap = doc.ParameterBindings;


            const string SHARED_PARAMETER_FILE_NAME = @"\shared-pramas-list.csv";
            const BuiltInParameterGroup PARAM_GROUP = BuiltInParameterGroup.PG_IFC;
            // create a dictionnary 
            IDictionary<string, BuiltInCategory> BuiltInCategoryDict = new Dictionary<string, BuiltInCategory>();
            BuiltInCategoryDict.Add("OST_Doors", BuiltInCategory.OST_Doors); //adding a key/value using the Add() method
            BuiltInCategoryDict.Add("OST_Windows", BuiltInCategory.OST_Windows); //adding a key/value using the Add() method


            IDictionary<string, ParameterType> ParameterTypeDict = new Dictionary<string, ParameterType>();
            ParameterTypeDict.Add("TEXT", ParameterType.Text); //adding a key/value using the Add() method
            ParameterTypeDict.Add("NUMBER", ParameterType.Number); //adding a key/value using the Add() method


            string paramList = "";
            string msg = "The following parameters were loaded and configured succesfuly :";

            // get the shared parameter file 
            DefinitionFile file = null;
            if (!File.Exists(app.SharedParametersFilename))
            {
                // if it does not exist 
                //TaskDialog.Show("Error ", "No shared parameter file is defined in the project");
                TaskDialog dialog = new TaskDialog("Decision");
                dialog.MainContent = "No shared parameter file is defined in the project.\nCreate one to proceed ?";
                dialog.AllowCancellation = true;
                dialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;

                TaskDialogResult result = dialog.Show();
                if (result == TaskDialogResult.Yes)
                {
                    // Yes
                    FileSaveDialog d = new FileSaveDialog("Text files|*.txt");
                    ItemSelectionDialogResult res = d.Show();
                    if (res == ItemSelectionDialogResult.Confirmed)
                    {

                        ModelPath pth = d.GetSelectedModelPath();
                        string localPath = null;

                        localPath = ModelPathUtils.ConvertModelPathToUserVisiblePath(pth);

                        //TaskDialog.Show("f", localPath);
                        // crate the file and save it 
                        System.IO.File.WriteAllLines(localPath, new string[0]);
                        app.SharedParametersFilename = localPath;

                    }
                    else
                    {
                        return Result.Failed;
                    }




                }
                else
                {
                    // No                    
                    return Result.Failed;
                }

            }


            // open file
            file = app.OpenSharedParameterFile();


            // Initiate transaction 
            var tx = new Transaction(doc);
            tx.Start("Export IFC");


            //TaskDialog.Show("Debug 2", file.Groups.get_Item(PARAMETER_GROUP_NAME).Name);
            // if our group is not there, create it
            DefinitionGroup group = file.Groups.get_Item("Evac");
            if (group == null) group = file.Groups.Create("Evac");

            // get the definitions csv file
            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + SHARED_PARAMETER_FILE_NAME;
            //TaskDialog.Show("Debug", path);
            string[] contents = null;
            try
            {
                //file = app.OpenSharedParameterFile();
                //TaskDialog.Show("Debug 2", file.Groups.get_Item(PARAMETER_GROUP_NAME).Name);
                contents = File.ReadAllText(path).Split('\n');

            }
            catch
            {
                TaskDialog.Show("Error", "The shared file could not be opened");
                tx.RollBack();
                return Result.Failed;
            }


            var csv = from line in contents
                      select line.Split(',').ToArray();

            // loop definitions 
            foreach (var row in csv.Skip(1)
                .TakeWhile(r => r.Length > 1 && r.Last().Trim().Length > 0))
            {
                string name = row[0]; // leftmost column                
                string type = row[1];
                string target = row[2];
                string description = row[3];
                string user_modifiable = row[4];


                // create definition 
                // create an instance definition in definition group MyParameters
                ExternalDefinitionCreationOptions option = new ExternalDefinitionCreationOptions(name, ParameterTypeDict[type]);
                option.UserModifiable = bool.Parse(user_modifiable);
                option.Description = description;
                Definition def = null;
                try
                {
                    // maybe the parameter already exists - but try to create it anyway
                    def = group.Definitions.Create(option);

                }
                catch
                {
                    // Already exists, retrieve from shared file
                    //TaskDialog.Show("Debug", "Not included in shared file " + name);                     
                    def = group.Definitions.get_Item(name);

                }

                // create a category set and insert category of wall to it
                CategorySet cats = app.Create.NewCategorySet();
                // use BuiltInCategory to get category enum
                string[] Targets = target.Split(';');
                foreach (var t in Targets)
                {
                    Category cat = Category.GetCategory(doc, BuiltInCategoryDict[t]);
                    cats.Insert(cat);
                }


                //Create an instance of InstanceBinding
                InstanceBinding instanceBinding = app.Create.NewInstanceBinding(cats);


                // Bind the definitions to the document
                // but check if param already exists ! 


                if (ContainsParameterName(bindingMap, option.Name, PARAM_GROUP, option.Type))
                {
                    // skip this one
                    //TaskDialog.Show("Debug", "Skipping " + name);
                    continue;


                }
                else
                {

                    bindingMap.Insert(def, instanceBinding, PARAM_GROUP);

                }

                //TaskDialog.Show("Debug", target);
                paramList += "\n" + name;
            }

            if (paramList == "")
            {
                TaskDialog.Show("Loading parameters", "Some parameters already exist in the project");
            }
            else
            {
                TaskDialog.Show("Loading parameters", msg + paramList);
            }





            // Terminate transaction
            tx.Commit();

            return Result.Succeeded;
        }
        /// <summary>
        /// Check if the parameter is already defined in the project (even if it is not defined in the shared file
        /// Revit allows definition of multiple params having same name (but different GUID). GUID cannot be accessed in this context
        /// If a parameter having same name, type and category already exists
        /// Then high chances it is our paramter - defined in a previous attempt maybe ?
        /// </summary>
        /// <param name="bindingMap"></param>
        /// <param name="paramName"></param>
        /// <returns></returns>
        private static bool ContainsParameterName(BindingMap bindingMap, string paramName, BuiltInParameterGroup paramGroup, ParameterType paramType)
        {
            DefinitionBindingMapIterator it = bindingMap.ForwardIterator();
            it.Reset();
            while (it.MoveNext())
            {
                if (it.Key.Name == paramName && it.Key.ParameterGroup == paramGroup && it.Key.ParameterType == paramType)
                {
                    return true;
                }


            }
            return false;


        }


    }
}
